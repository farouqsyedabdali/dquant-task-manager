generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  passwordHash     String
  subscriptionPlan String    @default("free")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  users            User[]
  tasks            Task[]
  comments         Comment[]
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String
  password      String
  role          Role      @default(EMPLOYEE)
  companyId     Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  company       Company   @relation(fields: [companyId], references: [id])
  comments      Comment[]
  
  // Task relationships
  assignedTasks Task[]    @relation("AssignedTasks")     // Tasks assigned to this user
  createdTasks  Task[]    @relation("CreatedTasks")      // Tasks created by this user
  
  @@unique([email, companyId])
}

model Task {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  
  // Task assignment and hierarchy
  assignerId   Int        // Who created/assigned the task
  assigneeId   Int        // Who the task is assigned to
  parentTaskId Int?       // For subtasks (optional)
  
  // Metadata
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  status       TaskStatus @default(TODO)
  priority     Priority   @default(MEDIUM)
  companyId    Int
  
  // Relations
  comments     Comment[]
  assigner     User       @relation("CreatedTasks", fields: [assignerId], references: [id])
  assignee     User       @relation("AssignedTasks", fields: [assigneeId], references: [id])
  parentTask   Task?      @relation("SubTasks", fields: [parentTaskId], references: [id])
  subtasks     Task[]     @relation("SubTasks")
  company      Company    @relation(fields: [companyId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  taskId    Int
  authorId  Int
  companyId Int
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  company   Company  @relation(fields: [companyId], references: [id])
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
